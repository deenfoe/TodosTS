{
  "compilerOptions": {
    // Указывает версию JavaScript, в которую будет компилироваться TypeScript.
    // Например, ES6 (или ES2015), ES2020, ESNext и т.д.
    "target": "ES6", // Это соответствует современным стандартам JS и подходит для большинства проектов.

    // Определяет модульную систему. CommonJS используется для Node.js,
    // ESNext используется для современных браузеров и инструментов сборки (например, Webpack).
    "module": "ESNext",

    // Позволяет использовать JSX синтаксис в TSX-файлах.
    // Обычно используется в React-проектах.
    "jsx": "react-jsx",

    // Указывает директорию, куда будут помещены скомпилированные JS-файлы.
    // Если вы хотите, чтобы ничего не менялось и файлы оставались на своих местах,
    // можно не указывать это свойство или установить null.
    "outDir": "./", // Оставляем JS файлы в тех же местах, что и TS/TSX файлы.

    // Если установлено в true, TypeScript будет сохранять исходные файлы в точности как они были,
    // но также добавит скомпилированные файлы рядом.
    "noEmit": true, // Мы используем сборщики вроде Webpack, поэтому сами файлы не нужны.

    // Эта настройка включает строгий режим, что помогает избегать ошибок.
    // Она включает несколько других проверок, как например, обязательная типизация всех переменных.
    "strict": true,

    // Включает поддержку импортов и экспортов ECMAScript модулей (ESM).
    "esModuleInterop": true, // Это упрощает работу с модулями, импортированными из JavaScript.

    // Показывает предупреждения, если вы пытаетесь использовать динамический импорт
    // и файлы, которые могут не существовать на момент компиляции.
    "resolveJsonModule": true,

    // Позволяет использовать синтаксис декораторов в TypeScript.
    // Может быть полезно для работы с библиотеками вроде MobX, Angular и т.д.
    "experimentalDecorators": true,

    // Эта настройка указывает, что TypeScript будет проверять файлы типов в папке node_modules/@types.
    // Здесь содержатся типы для популярных библиотек, таких как React, lodash и т.д.
    "typeRoots": ["node_modules/@types"],

    // Эта настройка разрешает пути для импорта модулей. Она позволяет вам настроить алиасы.
    // Например, импортировать модули через "@components/Button" вместо "../../components/Button".
    "baseUrl": "./",
    "paths": {
      "@components/*": ["src/components/*"]
    },
    "moduleResolution": "node"
  },
  "include": [
    "src/**/*" // Включаем все файлы в папке src для компиляции.
  ],
  "exclude": [
    "node_modules", // Исключаем папку node_modules из компиляции.
    "build" // Исключаем папку сборки (если она есть).
  ]
}
